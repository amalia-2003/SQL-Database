

-- Crearea tabelei "TROTINETE"
CREATE TABLE LICAAMALIA_TROTINETE (
    ID_TROTINETA NUMBER(6) PRIMARY KEY,
    NUME_MODEL VARCHAR2(30),
    PRODUCATOR VARCHAR2(25),
    STARE VARCHAR2(20),
    BATERIE_RAMASA NUMBER(8),
    PRET_MINUT NUMBER(8,2),
    LOCATIE_CURENTA VARCHAR2(40)
);
describe LICAAMALIA_TROTINETE

-- Crearea tabelei "UTILIZATORI"
CREATE TABLE LICAAMALIA_UTILIZATORI (
    ID_UTILIZATOR NUMBER PRIMARY KEY,
    NUME VARCHAR2(30),
    PRENUME VARCHAR2(30),
    ADRESA VARCHAR2(50),
    EMAIL VARCHAR2(25),
    TELEFON VARCHAR2(15)
);
describe LICAAMALIA_UTILIZATORI

-- Crearea tabelei "INTRETINERE_TROTINETE"
CREATE TABLE LICAAMALIA_INTRETINERE_TROTINETE (
    ID_INTRETINERE NUMBER(6) PRIMARY KEY,
    ID_TROTINETA NUMBER(6),
    DATA_INTRETINERE DATE,
    TIP_INTRETINERE VARCHAR2(30),
    COST_INTRETINERE NUMBER(8,2),
    PIESE_INLOCUITE VARCHAR2(40),
    TEHNICIAN_RESPONSABIL VARCHAR2(40),
    FOREIGN KEY (ID_TROTINETA) REFERENCES TROTINETE(ID_TROTINETA)
);
describe LICAAMALIA_INTRETINERE_TROTINETE

-- Crearea tabelei "RAPORT_TROTINETE"
CREATE TABLE LICAAMALIA_RAPORT_TROTINETE (
    ID_RAPORT NUMBER(6) PRIMARY KEY,
    ID_TROTINETA NUMBER(6),
    DATA_RAPORT DATE,
    KILOMETRI_PARCURSI NUMBER(8,2),
    STARE_BATERIE NUMBER(8,2),
    FOREIGN KEY (ID_TROTINETA) REFERENCES TROTINETE(ID_TROTINETA)
);
describe LICAAMALIA_RAPORT_TROTINETE

-- Crearea tabelei "INCHIRIERI"
CREATE TABLE LICAAMALIA_INCHIRIERI (
    ID_INCHIRIERE NUMBER(6) PRIMARY KEY,
    ID_UTILIZATOR NUMBER(6),
    ID_TROTINETA NUMBER(6),
    DATA_INCHIRIERE TIMESTAMP(6) WITH LOCAL TIME ZONE,
    DURATA_INCHIRIERE NUMBER(6),
    COST_TOTAL NUMBER(8,2),
    FOREIGN KEY (ID_UTILIZATOR) REFERENCES UTILIZATORI(ID_UTILIZATOR),
    FOREIGN KEY (ID_TROTINETA) REFERENCES TROTINETE(ID_TROTINETA)
);
describe LICAAMALIA_INCHIRIERI

-- Crearea tabelei "ISTORIC_UTILIZARE"
CREATE TABLE LICAAMALIA_ISTORIC_UTILIZARE (
    ID_ISTORIC NUMBER(6) PRIMARY KEY,
    ID_UTILIZATOR NUMBER(6),
    ID_TROTINETA NUMBER(6),
    DATA_UTILIZARE DATE,
    DURATA_UTILIZARE NUMBER(6),
    DISTANTA_PARCURSA NUMBER(8,2),
    COST_UTILIZARE NUMBER(8,2),
    FOREIGN KEY (ID_UTILIZATOR) REFERENCES UTILIZATORI(ID_UTILIZATOR),
    FOREIGN KEY (ID_TROTINETA) REFERENCES TROTINETE(ID_TROTINETA)
);
describe LICAAMALIA_ISTORIC_UTILIZARE

--Adăugarea unei coloane în tabela "UTILIZATORI"
ALTER TABLE LICAAMALIA_UTILIZATORI
ADD VARSTA NUMBER(3);

describe LICAAMALIA_UTILIZATORI

-- Șterge coloana "KILOMETRI_PARCURSI" din tabela "RAPORT_TROTINETE"
ALTER TABLE LICAAMALIA_RAPORT_TROTINETE
DROP COLUMN KILOMETRI_PARCURSI;

describe LICAAMALIA_RAPORT_TROTINETE

-- Adăugarea unei coloane noi "AN_FABRICATIE" în tabela "TROTINETE"
ALTER TABLE LICAAMALIA_TROTINETE
ADD AN_FABRICATIE NUMBER(5);

describe LICAAMALIA_TROTINETE

-- Crearea unei noi tabele "LOCALIZARE_TROTINETE"
CREATE TABLE LOCALIZARE_TROTINETE (
    ID_LOCALIZARE NUMBER(6) PRIMARY KEY,
    ID_TROTINETA NUMBER(6),
    LATITUDE NUMBER(10,6),
    LONGITUDE NUMBER(10,6),
    DATA_ACTUALIZARE TIMESTAMP(6) WITH LOCAL TIME ZONE,
    FOREIGN KEY (ID_TROTINETA) REFERENCES TROTINETE(ID_TROTINETA)
);
describe LOCALIZARE_TROTINETE

-- Adăugarea unei coloane noi "METODA_PLATA"  în tabela "INCHIRIERI"
ALTER TABLE LICAAMALIA_INCHIRIERI
ADD METODA_PLATA VARCHAR2(20);

describe LICAAMALIA_INCHIRIERI

--Adăugarea unei noi restricții "RESTRICTIE_VARSTA" în tabela "UTILIZATORI"
ALTER TABLE LICAAMALIA_UTILIZATORI
ADD CONSTRAINT RESTRICTIE_VARSTA CHECK (VARSTA BETWEEN 15 AND 65);

describe LICAAMALIA_UTILIZATORI

--Ștergerea unei coloane din tabela "INTRETINERE_TROTINETE"
ALTER TABLE LICAAMALIA_INTRETINERE_TROTINETE
DROP COLUMN TIP_INTRETINERE;

describe LICAAMALIA_INTRETINERE_TROTINETE

--1. Adăugarea unui utilizator nou în tabela "UTILIZATORI"
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) values(1, 'LICA', 'AMALIA', 'Str. Oltului 3', 'amalialica@gmail.com', '0771665319', 20);
SELECT* FROM LICAAMALIA_UTILIZATORI;

--2.Adăugarea de noi utilizatori în tabela "UTILIZATORI"
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(2, 'POPESCU', 'ION', 'Str. Muresului 7', 'ion.popescu@gmail.com', '0770123456', 25);
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(3, 'IONESCU', 'MARIA', 'Str. Dorobantilor 15', 'maria.ionescu@gmail.com', '0770789123', 30);
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(4, 'GEORGESCU', 'ANDREI', 'Str. Bucuresti 21', 'andrei.georgesc@gmail.com', '0770555678', 28);
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(5, 'RADULESCU', 'ELENA', 'Str. Unirii 8', 'elena.radulescu@gmail.com', '0770998765', 22);
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(6, 'POPA', 'MIHAI', 'Str. Timisului 12', 'mihai.popa@gmail.com', '0770888234', 26);
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(7, 'STANCU', 'GABRIELA', 'Str. Clujului 5', 'gabriela.stancu@gmail.com', '0770333678', 32);
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(8, 'CONSTANTIN', 'ALEXANDRU', 'Str. Iasi 19', 'alex.constantin@gmail.com', '0770111222', 29);
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(9, 'DUMITRU', 'CRISTINA', 'Str. Vaslui 4', 'cris.dumitru@gmail.com', '0770456123', 23);
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(10, 'BARBU', 'DANIEL', 'Str. Bihorului 11', 'daniel.barbu@gmail.com', '0770345876', 27);
INSERT INTO LICAAMALIA_UTILIZATORI(ID_UTILIZATOR, NUME, PRENUME, ADRESA, EMAIL, TELEFON, VARSTA) VALUES
(11, 'VASILESCU', 'ANA', 'Str. Sibiu 2', 'ana.vasilescu@gmail.com', '0770998765', 21);

SELECT* FROM LICAAMALIA_UTILIZATORI
ORDER BY ID_UTILIZATOR ASC;

--3.Adăugarea de noi înregistrări  în tabela "TROTINETE"
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(1, 'E10', 'XIAOMI', 'BUNA', '70', 1.5, 'Piata Unirii', 2020);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(2, 'E12', 'XIAOMI', 'BUNA', '75', 1.7, 'Parcul Carol', 2021);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(3, 'ES4', 'SEGWAY', 'BUNA', '60', 1.6, 'Parcul Herastrau', 2021);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(4, 'M365', 'XIAOMI', 'OK', '80', 1.4, 'Parcul Tineretului', 2020);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(5, 'BOOSTED REV', 'BOOSTED', 'BUNA', '90', 2.0, 'Aleea Privighetorilor', 2021);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(6, 'CITYBUG 2S', 'CITYBUG', 'OK', '65', 1.8, 'Parcul Izvor', 2022);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(7, 'Ninebot MAX', 'SEGWAY', 'BUNA', '85', 1.9, 'Bulevardul Magheru', 2021);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(8, 'Zero 9', 'ZERO', 'BUNA', '70', 1.5, 'Parcul Circului', 2022);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(9, 'Hollyburn P5', 'HOLLYBURN', 'OK', '75', 1.6, 'Parcul Titan', 2023);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(10, 'Air T15', 'AIRWHEEL', 'BUNA', '80', 1.7, 'Bulevardul Unirii', 2023);
INSERT INTO LICAAMALIA_TROTINETE (ID_TROTINETA, NUME_MODEL, PRODUCATOR, STARE, BATERIE_RAMASA, PRET_MINUT, LOCATIE_CURENTA, AN_FABRICATIE) VALUES
(11, 'GXL V2', 'GOTRAX', 'BUNA', '78', 1.6, 'Piata Victoriei', 2023);

SELECT* FROM LICAAMALIA_TROTINETE
ORDER BY ID_TROTINETA ASC;

--4.Adăugarea de noi înregistrări în tabela "INTRETINERE_TROTINETE"
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(1, 3, TO_DATE('2023-01-01', 'YYYY-MM-DD'), 'Revizie generală', 150.00, 'Baterie, Frâne', 'Ion Popescu');
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(2, 7, TO_DATE('2023-02-15', 'YYYY-MM-DD'), 'Schimb acumulator', 80.00, 'Acumulator', 'Maria Ionescu');
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(3, 4, TO_DATE('2023-03-20', 'YYYY-MM-DD'), 'Verificare sistem electric', 50.00, 'Cablu electric', 'Andrei Georgescu');
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(4, 9, TO_DATE('2023-04-10', 'YYYY-MM-DD'), 'Înlocuire roți', 60.00, 'Roți', 'Elena Radulescu');
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(5, 5, TO_DATE('2023-05-05', 'YYYY-MM-DD'), 'Verificare sistem de frânare', 45.00, 'Plăcuțe frână', 'Mihai Popa');
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(6, 2, TO_DATE('2023-06-18', 'YYYY-MM-DD'), 'Revizie generală', 120.00, 'Baterie, Sistem de direcție', 'Gabriela Stancu');
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(7, 10, TO_DATE('2023-07-22', 'YYYY-MM-DD'), 'Verificare sistem de iluminat', 30.00, 'Becuri', 'Alexandru Constantin');
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(8, 6, TO_DATE('2023-08-12', 'YYYY-MM-DD'), 'Înlocuire frâne', 70.00, 'Plăcuțe frână', 'Cristina Dumitru');
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(9, 8, TO_DATE('2023-09-28', 'YYYY-MM-DD'), 'Verificare suspensie', 40.00, 'Amortizoare', 'Daniel Barbu');
INSERT INTO LICAAMALIA_INTRETINERE_TROTINETE(ID_INTRETINERE, ID_TROTINETA, DATA_INTRETINERE, TIP_INTRETINERE, COST_INTRETINERE, PIESE_INLOCUITE, TEHNICIAN_RESPONSABIL) VALUES
(10, 1, TO_DATE('2023-10-15', 'YYYY-MM-DD'), 'Înlocuire lampă', 25.00, 'Lampă', 'Ana Vasilescu');

SELECT* FROM LICAAMALIA_INTRETINERE_TROTINETE
ORDER BY ID_INTRETINERE ASC;

--5.Adăugarea de noi înregistrări în tabela "RAPORT_TROTINETE"
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(1, 3, TO_DATE('2023-01-05', 'YYYY-MM-DD'), 15.5, 80.0);
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(2, 7, TO_DATE('2023-02-10', 'YYYY-MM-DD'), 10.2, 75.5);
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(3, 4, TO_DATE('2023-03-15', 'YYYY-MM-DD'), 20.8, 85.2);
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(4, 9, TO_DATE('2023-04-20', 'YYYY-MM-DD'), 18.3, 70.0);
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(5, 5, TO_DATE('2023-05-25', 'YYYY-MM-DD'), 12.7, 78.5);
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(6, 2, TO_DATE('2023-06-30', 'YYYY-MM-DD'), 14.0, 90.0);
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(7, 10, TO_DATE('2023-07-05', 'YYYY-MM-DD'), 16.5, 82.3);
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(8, 6, TO_DATE('2023-08-10', 'YYYY-MM-DD'), 19.1, 76.8);
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(9, 8, TO_DATE('2023-09-15', 'YYYY-MM-DD'), 11.8, 88.0);
INSERT INTO LICAAMALIA_RAPORT_TROTINETE (ID_RAPORT, ID_TROTINETA, DATA_RAPORT, KILOMETRI_PARCURSI, STARE_BATERIE) VALUES
(10, 1, TO_DATE('2023-10-20', 'YYYY-MM-DD'), 13.2, 79.5);

SELECT* FROM LICAAMALIA_RAPORT_TROTINETE
ORDER BY ID_RAPORT ASC;

--6.Adăugarea de noi înregistrări în tabela "INCHIRIERI"
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(1, 3, 2, TO_TIMESTAMP('2023-01-05 10:30:00', 'YYYY-MM-DD HH24:MI:SS'), 2, 10.50, 'Card');
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(2, 7, 6, TO_TIMESTAMP('2023-02-10 15:45:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 7.20, 'Numerar');
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(3, 4, 8, TO_TIMESTAMP('2023-03-15 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), 3, 18.90, 'Card');
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(4, 9, 1, TO_TIMESTAMP('2023-04-20 09:15:00', 'YYYY-MM-DD HH24:MI:SS'), 4, 26.40, 'Card');
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(5, 5, 5, TO_TIMESTAMP('2023-05-25 17:30:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 8.50, 'Numerar');
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(6, 2, 9, TO_TIMESTAMP('2023-06-30 14:00:00', 'YYYY-MM-DD HH24:MI:SS'), 2, 15.60, 'Card');
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(7, 10, 3, TO_TIMESTAMP('2023-07-05 11:45:00', 'YYYY-MM-DD HH24:MI:SS'), 3, 21.30, 'Numerar');
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(8, 6, 7, TO_TIMESTAMP('2023-08-10 18:20:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 11.90, 'Card');
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(9, 8, 4, TO_TIMESTAMP('2023-09-15 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), 4, 28.80, 'Card');
INSERT INTO LICAAMALIA_INCHIRIERI (ID_INCHIRIERE, ID_UTILIZATOR, ID_TROTINETA, DATA_INCHIRIERE, DURATA_INCHIRIERE, COST_TOTAL, METODA_PLATA) VALUES
(10, 1, 10, TO_TIMESTAMP('2023-10-20 13:15:00', 'YYYY-MM-DD HH24:MI:SS'), 2, 14.70, 'Numerar');

SELECT* FROM LICAAMALIA_INCHIRIERI
ORDER BY ID_INCHIRIERE ASC;

--7.Adăugarea de noi înregistrări în tabela "ISTORIC_UTILIZARE"
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(1, 3, 2, TO_DATE('2023-01-05', 'YYYY-MM-DD'), 2, 5.8, 8.20);
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(2, 7, 6, TO_DATE('2023-02-10', 'YYYY-MM-DD'), 1, 3.5, 4.50);
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(3, 4, 8, TO_DATE('2023-03-15', 'YYYY-MM-DD'), 3, 10.2, 14.70);
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(4, 9, 1, TO_DATE('2023-04-20', 'YYYY-MM-DD'), 4, 15.0, 20.40);
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(5, 5, 5, TO_DATE('2023-05-25', 'YYYY-MM-DD'), 1, 4.1, 6.80);
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(6, 2, 9, TO_DATE('2023-06-30', 'YYYY-MM-DD'), 2, 7.3, 10.50);
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(7, 10, 3, TO_DATE('2023-07-05', 'YYYY-MM-DD'), 3, 9.8, 13.20);
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(8, 6, 7, TO_DATE('2023-08-10', 'YYYY-MM-DD'), 1, 5.5, 7.90);
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(9, 8, 4, TO_DATE('2023-09-15', 'YYYY-MM-DD'), 4, 14.7, 19.80);
INSERT INTO LICAAMALIA_ISTORIC_UTILIZARE (ID_ISTORIC, ID_UTILIZATOR, ID_TROTINETA, DATA_UTILIZARE, DURATA_UTILIZARE, DISTANTA_PARCURSA, COST_UTILIZARE) VALUES
(10, 1, 10, TO_DATE('2023-10-20', 'YYYY-MM-DD'), 2, 6.2, 9.30);

SELECT* FROM LICAAMALIA_ISTORIC_UTILIZARE
ORDER BY ID_ISTORIC ASC;

--8.Actualizare STARE_BATERIE în RAPORT_TROTINETE cu ID_RAPORT = 1
UPDATE LICAAMALIA_RAPORT_TROTINETE
SET STARE_BATERIE = 85.0
WHERE ID_RAPORT = 1;

SELECT* FROM LICAAMALIA_RAPORT_TROTINETE WHERE ID_RAPORT = 1;

--9.Actualizare COST_TOTAL în tabela "INCHIRIERI" cu o creștere de 10%
UPDATE LICAAMALIA_INCHIRIERI
SET COST_TOTAL = COST_TOTAL * 1.1;

SELECT* FROM LICAAMALIA_INCHIRIERI;

--10 Ștergere Rapoarte Trotinetă după Data_RAPORT = '2023-04-01'
DELETE FROM LICAAMALIA_RAPORT_TROTINETE
WHERE DATA_RAPORT >= TO_DATE('2023-04-01', 'YYYY-MM-DD');

SELECT* FROM LICAAMALIA_RAPORT_TROTINETE
ORDER BY ID_RAPORT ASC;

--11.Ștergerea tuturor închirierilor din tabela "INCHIRIERI" în care durata închirierii (DURATA_INCHIRIERE) este mai mică sau egală cu 1 oră.
DELETE FROM LICAAMALIA_INCHIRIERI
WHERE DURATA_INCHIRIERE<=1;

SELECT* FROM LICAAMALIA_INCHIRIERI;

--12.Actualizare metoda de plată în INCHIRIERI cu ID_INCHIRIERE = 3
UPDATE LICAAMALIA_INCHIRIERI
SET METODA_PLATA = 'Transfer bancar'
WHERE ID_INCHIRIERE = 3;

SELECT* FROM LICAAMALIA_INCHIRIERI WHERE ID_INCHIRIERE = 3;

--exercitii cu toate elementele (min 20)
--1--Comanda SELECT returnează toate coloanele din tabelul "LICAAMALIA_UTILIZATORI" pentru rândurile în care adresa de email începe cu "andrei" și vârsta este mai mică de 30 de ani.
SELECT *
FROM LICAAMALIA_UTILIZATORI
WHERE EMAIL LIKE 'andrei%' AND VARSTA < 30;

--2--Comanda SELECT returnează toate coloanele din tabelul "LICAAMALIA_TROTINETE" pentru trotinetele care au un preț pe minut cuprins între 2 și 3 și se află în locația curentă 'Aleea Privighetorilor'.
SELECT *
FROM LICAAMALIA_TROTINETE
WHERE PRET_MINUT BETWEEN 2 AND 3
AND LOCATIE_CURENTA = 'Aleea Privighetorilor';

--3--Comanda SELECT returnează toate coloanele din tabelul "LICAAMALIA_INCHIRIERI" pentru înregistrările de închirieri în care costul total este mai mare de 15 și data închirierii nu este nulă.
SELECT *
FROM LICAAMALIA_INCHIRIERI
WHERE COST_TOTAL > 15 AND DATA_INCHIRIERE IS NOT NULL;

--4--Comanda SELECT returnează toate coloanele din tabelul "LICAAMALIA_UTILIZATORI" pentru utilizatorii ai căror ID-uri nu se găsesc în rezultatul subinterogării, care identifică ID-urile de utilizatori
-- distincte din tabelul "LICAAMALIA_INCHIRIERI". Astfel, sunt selectați utilizatorii care nu au efectuat nicio închiriere.
SELECT *
FROM LICAAMALIA_UTILIZATORI
WHERE ID_UTILIZATOR NOT IN (SELECT DISTINCT ID_UTILIZATOR FROM LICAAMALIA_INCHIRIERI);

--5--Rezultatul va cuprinde informații complete despre fiecare închiriere, inclusiv detalii despre trotineta închiriată și utilizatorul care a efectuat închirierea.
SELECT I.ID_INCHIRIERE, T.NUME_MODEL, T.PRODUCATOR, T.LOCATIE_CURENTA, U.NUME, U.PRENUME, U.ADRESA, U.EMAIL
FROM LICAAMALIA_INCHIRIERI I
INNER JOIN LICAAMALIA_TROTINETE T ON I.ID_TROTINETA = T.ID_TROTINETA -- Acest join asociază înregistrările care au ID-urile trotinetelor corespunzătoare în cele două tabele.
INNER JOIN LICAAMALIA_UTILIZATORI U ON I.ID_UTILIZATOR = U.ID_UTILIZATOR;

--6-- extrage coloanele specificate pentru înregistrările din tabele, asociază înregistrările corespunzătoare între aceste tabele folosind RIGHT JOIN pe baza ID-urilor trotinetelor și utilizatorilor,
--apoi filtrează rezultatele astfel încât să includă doar înregistrările cu ID-uri de închiriere ne-nule, și le sortează crescător după ID-ul închirierii.
SELECT I.ID_INCHIRIERE, I.DATA_INCHIRIERE, T.NUME_MODEL, T.PRODUCATOR, T.STARE, T.BATERIE_RAMASA, U.NUME, U.PRENUME
FROM LICAAMALIA_INCHIRIERI I
RIGHT JOIN LICAAMALIA_TROTINETE T ON I.ID_TROTINETA = T.ID_TROTINETA
RIGHT JOIN LICAAMALIA_UTILIZATORI U ON I.ID_UTILIZATOR = U.ID_UTILIZATOR
WHERE I.ID_INCHIRIERE IS NOT NULL
ORDER BY ID_INCHIRIERE ASC;

--7--Pentru fiecare grup, este calculat și afișat numărul total de închirieri asociate utilizatorului.
SELECT U.ID_UTILIZATOR, U.NUME, U.PRENUME, COUNT(I.ID_INCHIRIERE) AS NUMAR_INCHIRIERI
FROM LICAAMALIA_UTILIZATORI U
LEFT JOIN INCHIRIERI I ON U.ID_UTILIZATOR = I.ID_UTILIZATOR
GROUP BY U.ID_UTILIZATOR, U.NUME, U.PRENUME;

--8-- Pentru fiecare grup, este calculată și afișată durata medie a închirierilor asociate cu trotineta respectivă, iar rezultatul este grupat după numele modelului trotinetei.
SELECT T.NUME_MODEL, AVG(I.DURATA_INCHIRIERE) AS DURATA_MEDIE
FROM LICAAMALIA_TROTINETE T
LEFT JOIN LICAAMALIA_INCHIRIERI I ON T.ID_TROTINETA = I.ID_TROTINETA
GROUP BY T.NUME_MODEL;


--9--se calculează suma totală a costurilor închirierilor asociate cu utilizatorul respectiv, iar dacă nu există înregistrări de închirieri pentru un utilizator, suma este considerată 0.
SELECT U.ID_UTILIZATOR, U.NUME, U.PRENUME, NVL(SUM(I.COST_TOTAL), 0) AS SUMA_TOTALA
FROM LICAAMALIA_UTILIZATORI U
LEFT JOIN INCHIRIERI I ON U.ID_UTILIZATOR = I.ID_UTILIZATOR
GROUP BY U.ID_UTILIZATOR, U.NUME, U.PRENUME;


--10-- rezultatul final conține informații despre utilizatori care au efectuat cel puțin o închiriere și nivelul maxim al bateriei pentru trotinetele lor,
-- cu condiția ca nivelul bateriei să fie mai mare de 50%.
SELECT U.ID_UTILIZATOR, U.NUME, U.PRENUME, COUNT(I.ID_INCHIRIERE) AS NUMAR_INCHIRIERI, MAX(T.BATERIE_RAMASA) AS NIVEL_BATERIE
FROM LICAAMALIA_UTILIZATORI U
LEFT JOIN LICAAMALIA_INCHIRIERI I ON U.ID_UTILIZATOR = I.ID_UTILIZATOR
LEFT JOIN LICAAMALIA_TROTINETE T ON I.ID_TROTINETA = T.ID_TROTINETA
WHERE T.BATERIE_RAMASA > 50
GROUP BY U.ID_UTILIZATOR, U.NUME, U.PRENUME
HAVING COUNT(I.ID_INCHIRIERE) > 0;


--11-- rezultatul final conține informații despre utilizatorii care au efectuat cel puțin o închiriere și au o durată medie a închirierilor mai mică de 10 minute.
SELECT U.ID_UTILIZATOR, U.NUME, U.PRENUME, COUNT(I.ID_INCHIRIERE) AS NUMAR_INCHIRIERI, AVG(I.DURATA_INCHIRIERE) AS DURATA_MEDIE
FROM LICAAMALIA_UTILIZATORI U
LEFT JOIN LICAAMALIA_INCHIRIERI I ON U.ID_UTILIZATOR = I.ID_UTILIZATOR
GROUP BY U.ID_UTILIZATOR, U.NUME, U.PRENUME
HAVING COUNT(I.ID_INCHIRIERE) > 0 AND AVG(I.DURATA_INCHIRIERE) < 10;

--12-- extrage informații incluzând ID-ul închirierii, data închirierii formatată în stilul 'DD-MM-YYYY HH24:MI:SS', durata închirierii, numele modelului trotinetei și numele complet al utilizatorului
-- rezultatul final conține informații despre fiecare închiriere, incluzând detaliile despre trotineta închiriată și utilizatorul asociat.
SELECT ID_INCHIRIERE, TO_CHAR(DATA_INCHIRIERE, 'DD-MM-YYYY HH24:MI:SS') AS DATA_INCHIRIERE_FORMATATA, DURATA_INCHIRIERE, T.NUME_MODEL, U.NUME || ' ' || U.PRENUME AS NUME_UTILIZATOR
FROM LICAAMALIA_INCHIRIERI I
JOIN LICAAMALIA_TROTINETE T ON I.ID_TROTINETA = T.ID_TROTINETA
JOIN LICAAMALIA_UTILIZATORI U ON I.ID_UTILIZATOR = U.ID_UTILIZATOR;

--13--SUBSTR pentru a extrage un segment din adresa de email, începând de la primul caracter și continuând până înainte de simbolul '@', folosind funcția INSTR pentru a identifica poziția simbolului '@'
-- în adresa de email. Astfel, rezultatul va conține informații despre fiecare utilizator, incluzând o versiune parțială a adresei de email, până la simbolul '@'.
SELECT ID_UTILIZATOR, EMAIL, SUBSTR(EMAIL, 1, INSTR(EMAIL, '@') - 1) AS UTILIZATOR_EMAIL
FROM LICAAMALIA_UTILIZATORI;

--14--Această nouă coloană este generată utilizând o clauză CASE, care evaluează condiții pentru coloana "VARSTA" și atribuie o categorie corespunzătoare în funcție de aceste condiții.
SELECT NUME,
CASE WHEN VARSTA < 25 THEN 'Tanar' WHEN VARSTA BETWEEN 25 AND 35 THEN 'Adult'
ELSE 'Senior'
END AS CATEGORIE_VARSTA
FROM LICAAMALIA_UTILIZATORI;

--15--TO_CHAR(DATA_INCHIRIERE, 'YYYY'): transformă coloana "DATA_INCHIRIERE" într-un șir de caractere (string) reprezentând anul
--NVL(..., 'Valoare nula'):dacă anul nu poate fi determinat din coloana "DATA_INCHIRIERE" (adică data închirierii este NULL sau are o problemă de formatare), atunci se afișează "Valoare nula".
--rezultatul final include ID-ul închirierii și informații despre anul, luna și ziua închirierii, sau "Valoare nula" în cazul în care aceste date nu sunt disponibile.
SELECT ID_INCHIRIERE,
    NVL(TO_CHAR(DATA_INCHIRIERE, 'YYYY'), 'Valoare nula') AS AN_INCHIRIERE,
    NVL(TO_CHAR(DATA_INCHIRIERE, 'MM'), 'Valoare nula') AS LUNA_INCHIRIERE,
    NVL(TO_CHAR(DATA_INCHIRIERE, 'DD'), 'Valoare nula') AS ZIUA_INCHIRIERE
FROM LICAAMALIA_INCHIRIERI;

--16--EXTRACT(YEAR FROM DATA_RAPORT) AS AN_RAPORT: Extrage anul din coloana "DATA_RAPORT" și îl afișează într-o coloană numită "AN_RAPORT".
--NVL(EXTRACT(MONTH FROM DATA_RAPORT), 0) AS LUNA_RAPORT: Extrage luna din coloana "DATA_RAPORT" și, dacă această informație este nulă,
--înlocuiește cu 0, apoi afișează rezultatul într-o coloană numită "LUNA_RAPORT".
--EXTRACT(DAY FROM DATA_RAPORT) AS ZIUA_RAPORT: Extrage ziua din coloana "DATA_RAPORT" și o afișează într-o coloană numită "ZIUA_RAPORT".
--rezultatul final al acestei comenzi conține ID-ul raportului și informații despre anul, luna și ziua la care a fost generat fiecare raport
-- referitor la trotinete. Dacă informația despre lună este nulă, se afișează 0 în coloana "LUNA_RAPORT".
SELECT ID_RAPORT,
    EXTRACT(YEAR FROM DATA_RAPORT) AS AN_RAPORT,
    NVL(EXTRACT(MONTH FROM DATA_RAPORT), 0) AS LUNA_RAPORT,
    EXTRACT(DAY FROM DATA_RAPORT) AS ZIUA_RAPORT
FROM LICAAMALIA_RAPORT_TROTINETE;


--17-- extrage informații despre utilizatori din tabelul "LICAAMALIA_UTILIZATORI", inclusiv numele și prenumele, împreună cu data închirierii din tabelul "LICAAMALIA_INCHIRIERI".
--Utilizatorii sunt asociați închirierilor utilizând o condiție de egalitate între ID-ul utilizatorului din ambele tabele. Rezultatul final include doar acele înregistrări pentru care
-- data închirierii este anterioară datei și orei curente (SYSDATE), în funcție de clauza WHERE.
SELECT U.NUME, U.PRENUME, I.DATA_INCHIRIERE
FROM LICAAMALIA_UTILIZATORI U
JOIN LICAAMALIA_INCHIRIERI I ON U.ID_UTILIZATOR = I.ID_UTILIZATOR
WHERE I.DATA_INCHIRIERE < SYSDATE;

--18-- Rezultatul final include doar înregistrări pentru care rapoartele sunt ulterioare datei de 1 ianuarie 2023 și au
--o stare a bateriei mai mare de 50%. Astfel, sunt extrase informații despre trotinetele care au rapoarte de stare recente și baterii cu niveluri ridicate.
SELECT T.ID_TROTINETA, T.NUME_MODEL, T.PRODUCATOR, T.STARE, R.STARE_BATERIE
FROM LICAAMALIA_TROTINETE T
JOIN LICAAMALIA_RAPORT_TROTINETE R ON T.ID_TROTINETA = R.ID_TROTINETA
WHERE R.DATA_RAPORT > TO_DATE('2023-01-01', 'YYYY-MM-DD')
AND R.STARE_BATERIE>50;

--19-- rezultatul final al acestei secvențe va conține toate înregistrările unice de acțiuni (închirieri și utilizări) ale utilizatorilor
--care au avut loc după 1 ianuarie 2023. Orice duplicare între cele două seturi de rezultate este eliminată automat de către operatorul UNION.
SELECT ID_UTILIZATOR, DATA_INCHIRIERE AS "DATA_ACTIUNE" FROM LICAAMALIA_INCHIRIERI
WHERE DATA_INCHIRIERE > TO_DATE('2023-01-01', 'YYYY-MM-DD')
UNION
SELECT ID_UTILIZATOR, DATA_UTILIZARE AS "DATA_ACTIUNE" FROM LICAAMALIA_ISTORIC_UTILIZARE
WHERE DATA_UTILIZARE > TO_DATE('2023-01-01', 'YYYY-MM-DD');

--20--Rezultatul va conține ID-urile trotinetelor și datele rapoartelor asociate acestora care nu au înregistrări corespondente în istoricul utilizării.
SELECT ID_TROTINETA, DATA_RAPORT
FROM LICAAMALIA_RAPORT_TROTINETE
MINUS
SELECT ID_TROTINETA, DATA_UTILIZARE
FROM LICAAMALIA_ISTORIC_UTILIZARE;


--21-- sunt extrase informații despre utilizatorii care au efectuat închirieri cu durată mai mare de 3 minute.
SELECT NUME, PRENUME, ADRESA
FROM LICAAMALIA_UTILIZATORI
WHERE ID_UTILIZATOR IN (SELECT ID_UTILIZATOR FROM LICAAMALIA_INCHIRIERI WHERE DURATA_INCHIRIERE > 3);


--22--sunt extrase informații despre utilizatorii care au înregistrări în istoricul utilizării asociate aceluiași utilizator.
SELECT U.NUME, U.PRENUME
FROM LICAAMALIA_UTILIZATORI U
WHERE EXISTS (
    SELECT 1--verifică dacă există cel puțin o înregistrare în tabela "LICAAMALIA_ISTORIC_UTILIZARE" care are ID-ul utilizatorului corespunzător utilizatorului din tabela "LICAAMALIA_UTILIZATORI".
    FROM LICAAMALIA_ISTORIC_UTILIZARE IU
    WHERE IU.ID_UTILIZATOR = U.ID_UTILIZATOR
);


--23-- sunt selectate anumite coloane din tabela existentă "LICAAMALIA_TROTINETE" și aceste coloane sunt folosite pentru a crea o copie de rezervă a datelor.
CREATE TABLE TROTIENTE_BACKUP AS
SELECT
    ID_TROTINETA,
    NUME_MODEL,
    PRODUCATOR,
    STARE,
    BATERIE_RAMASA,
    PRET_MINUT,
    LOCATIE_CURENTA
FROM LICAAMALIA_TROTINETE;
describe TROTIENTE_BACKUP


--24
-- Crearea tabelului "ANGAJATII"
CREATE TABLE ANGAJATII (
    ID_ANGAJAT NUMBER(6) PRIMARY KEY,
    NUME VARCHAR2(30),
    FUNCTIE VARCHAR2(30),
    SALARIU NUMBER(8,2),
    ID_SEF NUMBER(6)
);
describe ANGAJATII
 
INSERT INTO ANGAJATII VALUES (1, 'Manager General', 'Manager', 10000, NULL);
INSERT INTO ANGAJATII VALUES (2, 'Manager Financiar', 'Manager', 8000, 1);
INSERT INTO ANGAJATII VALUES (3, 'Manager Tehnic', 'Manager', 8000, 1);
INSERT INTO ANGAJATII VALUES (4, 'Angajat Contabilitate', 'Contabil', 6000, 2);
INSERT INTO ANGAJATII VALUES (5, 'Inginer Software', 'Tehnician', 7000, 3);
INSERT INTO ANGAJATII VALUES (6, 'Tehnician Hardware', 'Tehnician', 7000, 3);

--această interogare va returna o listă ierarhică de angajați începând cu aceia care nu au șefi (cu ID_SEF IS NULL), și continuând cu angajații subordonați în conformitate cu relația "ID_SEF".
SELECT ID_ANGAJAT, NUME, FUNCTIE, ID_SEF
FROM ANGAJATII
START WITH ID_SEF IS NULL
CONNECT BY PRIOR ID_ANGAJAT = ID_SEF;

--25--Astfel, rezultatul final va fi o listă ierarhică de angajați începând cu angajatul care are ID_ANGAJAT = 2,
-- și continuând cu angajații subordonați în conformitate cu relația "ID_SEF". Fiecare rând va include nivelul ierarhic la care se află angajatul respectiv.
SELECT ID_ANGAJAT, NUME, FUNCTIE, ID_SEF, LEVEL
FROM ANGAJATII
START WITH ID_ANGAJAT = 2
CONNECT BY PRIOR ID_ANGAJAT = ID_SEF;

--26--Rezultatul final va conține informații despre angajați, inclusiv nivelul ierarhic, și va include, de asemenea, o coloană "PATH"
--care indică calea completă în ierarhie pentru fiecare angajat. Calea este reprezentată printr-un șir de caractere care conține numele angajaților separați de ' / '.
SELECT ID_ANGAJAT, NUME, FUNCTIE, SALARIU, LEVEL,
    SYS_CONNECT_BY_PATH(NUME, ' / ') AS PATH
FROM ANGAJATII
START WITH ID_ANGAJAT = 1
CONNECT BY PRIOR ID_ANGAJAT = ID_SEF;

--27--va conține o listă de utilizatori din tabela "LICAAMALIA_UTILIZATORI" care au un număr de telefon specificat (non-nul)
CREATE VIEW UTILIZATORI_VIRTUALI AS
SELECT ID_UTILIZATOR, NUME, ADRESA
FROM LICAAMALIA_UTILIZATORI
WHERE TELEFON IS NOT NULL;
SELECT* FROM UTILIZATORI_VIRTUALI;

--28-- creează un sinonim numit "INTRETINERE_SINONIM" pentru tabela "LICAAMALIA_INTRETINERE_TROTINETE" și apoi afișează conținutul acestei noi referințe sinonim.
CREATE SYNONYM INTRETINERE_SINONIM FOR LICAAMALIA_INTRETINERE_TROTINETE;
SELECT* FROM INTRETINERE_SINONIM;

--29--Indexul este utilizat pentru a accelera operațiile de căutare pe această coloană, îmbunătățind performanța interogărilor care implică condiții de căutare pe această coloană.
--Rezultatul acestei comenzi va conține informații despre coloana "KILOMETRI_PARCURSI" și indexul "IDX_KILOMETRI_PARCURSI", inclusiv detaliile privind spațiul ocupat, ordinul coloanei în index și altele
CREATE INDEX IDX_KILOMETRI_PARCURSI ON LICAAMALIA_RAPORT_TROTINETE(KILOMETRI_PARCURSI);
SELECT* FROM ALL_IND_COLUMNS WHERE INDEX_NAME = 'IDX_KILOMETRI_PARCURSI';